对象
每个对象都拥有一个原型对象，是由该对象的__proto__引用的，通过它可以继承原型对象的属性。
var a = new Array();
a.__proto === Array.prototype  //true
创建一个Array的实例，这个实例的原型指向Array.prototype.
Array.prototype本身也是对象，也有继承的原型：
a.__proto__.__proto__ === Object.prototype //true
等同于Array.prototype.__proto__ === Object.prototype //true
说明Array本身是继承自Object,Object的原型最终指向了null
Object.prototype.__proto__ === null //true

函数
函数也是对象，但比较特殊，函数的原型指向的是Function.prototype
var Foo = function() { }
Foo.__proto__ === Function.prototype  //true
Foo还拥有prototype对象，当通过构造函数创建实例，实例的原型就指向Foo的prototype
var a = new Foo()
a.__proto__ === Foo.prototype //true
而Foo的原型对象本身是由Object构造的实例对象
Foo.prototype.__proto__ === Object.prototype //true
Foo的prototype属性比较特殊，拥有一个constructor,指向函数的构造函数本身
Foo.prototype.constructor === Foo //true
a.constructor === Foo //true
a.constructor === Foo.prototype.__proto__ //true

原型链的意义在于当访问对象的某个属性，js引擎会查找对象本身的属性，如果没找到，会到对象的原型上去找，如果还是找不到，会继续到
原型的原型去找，依次类推，最终找到顶层的Object.prototype，如果还是没找到，则返回undefined。
